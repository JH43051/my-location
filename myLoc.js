window.onload = getMyLocation;

//Here's a global variable/object that hard-codes a set of destination coords.
var ourCoords = {
  latitude: 47.624851,
  longitude: -122.52099
};
/*Here's our global variable for the watchId that is generated by the geolocation
API when watchPosition runs*/
var watchId = null;
//Here's our global variable for the Google Maps API.
var map = null;
//Global variable for calculating distance between current and last position.
var prevCoords = null;

//If geolocation support exists, our HTML form button behavior code will run.
function getMyLocation() {
  if (navigator.geolocation) {
    var watchButton = document.getElementById("watch");
    watchButton.onclick = watchLocation;
    var clearWatchButton = document.getElementById("clearWatch");
    clearWatchButton.onclick = clearWatch;
  } else {
    alert ("Oops, no geolocation support");
  }
}
/*When the watch button is pressed, this gets continuous realtime coordinates.
We typed in the options/property values that we wanted for the positionOptions
parameter directly, rather than making a seperate "options" object with the
values we wanted and passing that as an argument.*/
function watchLocation() {
  watchId = navigator.geolocation.watchPosition(displayLocation,
                                                displayError,
                                                {timeout: 15000,
                                                 maximumAge: 30000
                                                });
}
/*If a watchId exists (ie. watchPosition is running), then when the clearWatch
button is pressed, this function stops getting your realtime position.*/
function clearWatch() {
  if (watchId) {
    navigator.geolocation.clearWatch(watchId);
    watchId = null;
  }
}

/*The watchPosition method within the geolocation API takes a parameter
"successHandler" which is a function that is called if the browser successfully
determines your location.  In this case we are passing displayLocation as
that function/argument.*/
function displayLocation(position) {
  var latitude = position.coords.latitude;
  var longitude = position.coords.longitude;

  var div = document.getElementById("location");
  div.innerHTML = "You are at Latitude: " + latitude + ", Longitude: " + longitude;
  div.innerHTML += " (with " + position.coords.accuracy + " meters accuracy)";

  var km = computeDistance(position.coords, ourCoords);
  var distance = document.getElementById("distance");
  distance.innerHTML = "You are " + km + " km from your destination.";
  /*Here we call the showMap function to display a Google map.  We only want to
  draw the map once, but this function gets called often by watchPosition, so we
  test to see if the map has been drawn already.  If the map is already there,
  then we simply refocus the map on new location & drop a new pin when the
  distance between the old and new positions is greater than 20 meters.*/
  if (map === null) {
    showMap(position.coords);
    prevCoords = position.coords;
  } else {
    var meters = computeDistance(position.coords, prevCoords) * 1000;
    if (meters > 20) {
      scrollMapToPosition(position.coords);
      prevCoords = position.coords;
    }
  }
}
/*watchPosition also takes an optional parameter
"errorHandler", which is a function that is called when the browser can't
determine location.  A numerical error code is passed into our error handler
function as argument "error" by the API, so we write our error handler below to
assign the error code to useful info.*/
function displayError(error) {
  var errorTypes = {
    0: "Uknown error",
    1: "Permission denied by user",
    2: "Position is not available",
    3: "Request timed out"
  };
  var errorMessage = errorTypes[error.code];
  if (error.code == 0 || error.code == 2) {
    errorMessage = errorMessage + " " + error.message;
  }
  var div = document.getElementById("location");
  div.innerHTML = errorMessage;
}

/*The next two functions use the Haversine equation to compute the distance
between two coordinates in km.  This section can be reused for other projects.*/
function computeDistance(startCoords, destCoords) {
  var startLatRads = degreesToRadians(startCoords.latitude);
  var startLongRads = degreesToRadians(startCoords.longitude);
  var destLatRads = degreesToRadians(destCoords.latitude);
  var destLongRads = degreesToRadians(destCoords.longitude);
  var Radius = 6371; // radius of the Earth in km
  var distance = Math.acos(Math.sin(startLatRads) * Math.sin(destLatRads) +
                 Math.cos(startLatRads) * Math.cos(destLatRads) *
                 Math.cos(startLongRads - destLongRads)) * Radius;
return distance;
}

function degreesToRadians(degrees) {
  var radians = (degrees * Math.PI)/180;
  return radians;
}

//Lets's use the Google Maps API to display our coordinates on a map!...
function showMap(coords) {
  /*To use the Google Maps functionality, we need latitude and longitude bundled
  into one object (Google's preference).  Here we use Google's constructor.*/
  var googleLatAndLong =
    new google.maps.LatLng(coords.latitude, coords.longitude);
  //Here we create an object dictating a few options for the Google Maps display.
  var mapOptions = {
    zoom: 10,
    center: googleLatAndLong,
    mapTypeId: google.maps.MapTypeId.ROADMAP
  };
  var mapDiv = document.getElementById("map");
  //Here we construct a map object using our map options and the HTML div.
  map = new google.maps.Map(mapDiv, mapOptions);
  //This bit shows our marker on the map by calling the "pin" function below.
  var title = "Your Location";
  var content = "You are here: " + coords.latitude + ", " + coords.longitude;
  addMarker(map, googleLatAndLong, title, content);
}
//Let's create a "pin" for our destination on the map with a clickable tooltip.
function addMarker(map, latlong, title, content) {
  var markerOptions = {
    position: latlong,
    map: map,
    title: title,
    clickable: true
  };
  var marker = new google.maps.Marker(markerOptions);

  var infoWindowOptions = {
    content: content,
    position: latlong
  };

  var infoWindow = new google.maps.InfoWindow(infoWindowOptions);

  google.maps.event.addListener(marker, "click", function() {
    infoWindow.open(map);
  });
}
//This is our function that drops new pins as our position changes.
function scrollMapToPosition(coords) {
  var latitude = coords.latitude;
  var longitude = coords.longitude;
  var latlong = new google.maps.LatLng(latitude, longitude);

  map.panTo(latlong);

  addMarker(map, latlong, "Your new location", "You moved to: " + latitude +
                          ", " + longitude);
}
